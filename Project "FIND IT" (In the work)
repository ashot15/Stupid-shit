import sys
import numpy as np
import pywt
import lzma
import cv2
from sklearn.cluster import KMeans
import pickle
import json
import os
import time
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QLabel, QFileDialog, QVBoxLayout, QTextEdit
from PyQt5.QtGui import QPixmap, QImage
from PyQt5.QtCore import Qt


# === Функции сжатия ===

def calculate_psnr(original, compressed):
    """Вычисление PSNR для оценки качества."""
    if original.shape != compressed.shape:
        return None
    mse = np.mean((original - compressed) ** 2)
    if mse == 0:
        return 100
    max_pixel = 255.0
    psnr = 20 * np.log10(max_pixel / np.sqrt(mse))
    return psnr


def custom_compression(image, wavelet_type='haar', level=1, quantization_factor=10, min_size=32):
    """Сжатие с использованием вейвлет-преобразования."""
    height, width = image.shape[:2]
    if height <= min_size or width <= min_size:
        compressed_data = lzma.compress(image.tobytes(), preset=9)
        return compressed_data, None, image.shape, {'wavelet_used': False}

    try:
        coeffs_r = pywt.wavedec2(image[:, :, 0], wavelet_type, level=level)
        coeffs_g = pywt.wavedec2(image[:, :, 1], wavelet_type, level=level)
        coeffs_b = pywt.wavedec2(image[:, :, 2], wavelet_type, level=level)
    except ValueError:
        return None

    coeffs_r_array, _ = pywt.coeffs_to_array(coeffs_r)
    coeffs_g_array, _ = pywt.coeffs_to_array(coeffs_g)
    coeffs_b_array, _ = pywt.coeffs_to_array(coeffs_b)

    # Квантизация коэффициентов
    coeffs_r_quantized = np.round(coeffs_r_array / quantization_factor) * quantization_factor
    coeffs_g_quantized = np.round(coeffs_g_array / quantization_factor) * quantization_factor
    coeffs_b_quantized = np.round(coeffs_b_array / quantization_factor) * quantization_factor

    compressed_data = lzma.compress(np.hstack((coeffs_r_quantized.flatten(),
                                               coeffs_g_quantized.flatten(),
                                               coeffs_b_quantized.flatten())).astype(np.float32), preset=9)
    return compressed_data, (_, _, _), image.shape, {
        'wavelet_used': True,
        'wavelet_type': wavelet_type,
        'level': level,
        'quantization_factor': quantization_factor,
        'min_size': min_size
    }


def color_quantization(image, n_colors=256):
    """Квантизация цвета с использованием k-means."""
    pixels = image.reshape(-1, 3)
    kmeans = KMeans(n_clusters=n_colors, random_state=42).fit(pixels)
    labels = kmeans.predict(pixels)
    centers = kmeans.cluster_centers_
    quantized_image = centers[labels].reshape(image.shape).astype(np.uint8)
    palette = {i: tuple(map(int, centers[i])) for i in range(n_colors)}
    return quantized_image, palette


def compress_with_color_quantization(image, n_colors=256):
    """Сжатие с использованием квантизации цвета."""
    quantized_image, palette = color_quantization(image, n_colors)
    indices = np.array([list(palette.keys()).index(tuple(pixel)) for pixel in quantized_image.reshape(-1, 3)])
    compressed_data = lzma.compress(indices.astype(np.uint8).tobytes(), preset=9)
    return compressed_data, palette, quantized_image.shape, {'n_colors': n_colors}


def custom_decompression(compressed_data, coeffs_slices, original_shape, params):
    """Декомпрессия с учетом параметров."""
    try:
        if not params['wavelet_used']:
            image_bytes = lzma.decompress(compressed_data)
            restored_image = np.frombuffer(image_bytes, dtype=np.uint8).reshape(original_shape)
            return restored_image
        decompressed_data = np.frombuffer(lzma.decompress(compressed_data), dtype=np.float32)
        split_size = original_shape[0] * original_shape[1]
        coeffs_r = (decompressed_data[:split_size].reshape(original_shape[:2]), coeffs_slices[0])
        coeffs_g = (decompressed_data[split_size:2 * split_size].reshape(original_shape[:2]), coeffs_slices[1])
        coeffs_b = (decompressed_data[2 * split_size:].reshape(original_shape[:2]), coeffs_slices[2])
        r = pywt.waverec2(pywt.array_to_coeffs(*coeffs_r, output_format='wavedec2'), params['wavelet_type'])
        g = pywt.waverec2(pywt.array_to_coeffs(*coeffs_g, output_format='wavedec2'), params['wavelet_type'])
        b = pywt.waverec2(pywt.array_to_coeffs(*coeffs_b, output_format='wavedec2'), params['wavelet_type'])
        restored = np.stack([r, g, b], axis=-1)
        if tuple(original_shape) != restored.shape:
            restored = cv2.resize(restored, (params['original_shape'][1], params['original_shape'][0]))
        return np.clip(restored, 0, 255).astype(np.uint8)
    except Exception as e:
        print(f"Ошибка при декомпрессии: {e}")
        return None


def decompress_with_color_quantization(compressed_data, palette, shape, params):
    """Декомпрессия с использованием квантизации цвета."""
    try:
        indices = np.frombuffer(lzma.decompress(compressed_data), dtype=np.uint8).reshape(-1)
        quantized_image = np.array([palette[i] for i in indices], dtype=np.uint8).reshape(shape)
        return quantized_image
    except Exception as e:
        print(f"Ошибка при декомпрессии: {e}")
        return None


# === Автоматический подбор параметров ===

def test_wavelet_params(image, wavelet_type, level, quantization_factor, min_size):
    """Тестирует одну комбинацию параметров вейвлет-сжатия."""
    result = custom_compression(image, wavelet_type, level, quantization_factor, min_size)
    if result is None:
        return None
    compressed_data, coeffs_slices, shape, params = result
    restored_image = custom_decompression(compressed_data, coeffs_slices, shape, params)
    if restored_image is None:
        return None
    file_size = len(compressed_data)
    psnr = calculate_psnr(image, restored_image)
    if psnr is None:
        return None
    return file_size, params, compressed_data, restored_image


def test_color_quantization_params(image, n_colors):
    """Тестирует одну комбинацию параметров квантизации цвета."""
    result = compress_with_color_quantization(image, n_colors)
    if result is None:
        return None
    compressed_data, palette, shape, params = result
    restored_image = decompress_with_color_quantization(compressed_data, palette, shape, params)
    if restored_image is None:
        return None
    file_size = len(compressed_data)
    psnr = calculate_psnr(image, restored_image)
    if psnr is None:
        return None
    return file_size, params, compressed_data, restored_image


def find_best_parameters_sequential(image, progress_file="progress.json", log_file="log.txt"):
    """Находит лучшие параметры для сжатия последовательно, используя массивы."""
    best_size = float('inf')
    best_params = {}
    best_compressed_data = None
    best_restored_image = None
    original_size = len(image.tobytes())  # Размер оригинального изображения

    # Загрузка прогресса из файла
    tested_params = set()
    if os.path.exists(progress_file):
        with open(progress_file, "r") as f:
            tested_params = set(json.load(f))

    # Сохранение прогресса
    def save_progress(params_set):
        with open(progress_file, "w") as f:
            json.dump(list(params_set), f)

    # Логирование результатов
    def log_results(size, params, elapsed_time):
        with open(log_file, "a") as f:
            compression_ratio = original_size / size if size > 0 else 0
            f.write(f"Time: {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"Compression Ratio: {compression_ratio:.2f}x\n")
            f.write(f"Best Size: {size} bytes\n")
            f.write(f"Parameters: {params}\n")
            f.write("-" * 50 + "\n")

    # Параметры для тестирования
    wavelet_types = ['haar', 'db1', 'db2', 'sym2', 'coif1', 'bior2.2']
    levels = [1, 2, 3, 4, 5]
    quantization_factors = list(range(1, 31))
    n_colors_list = [8, 16, 32, 64, 128, 256, 512]
    min_sizes = [16, 32, 48, 64]

    start_time = time.time()

    # Тестирование вейвлет-параметров
    for wavelet_type in wavelet_types:
        for level in levels:
            for quantization_factor in quantization_factors:
                for min_size in min_sizes:
                    # Создаем уникальный ключ как строковое представление параметров
                    key = f"{wavelet_type}_{level}_{quantization_factor}_{min_size}"
                    if key in tested_params:
                        continue
                    result = test_wavelet_params(image, wavelet_type, level, quantization_factor, min_size)
                    if result is not None:
                        file_size, params, compressed_data, restored_image = result
                        if file_size < best_size and calculate_psnr(image, restored_image) > 30:
                            best_size = file_size
                            best_params = params
                            best_compressed_data = compressed_data
                            best_restored_image = restored_image
                    tested_params.add(key)  # Добавляем строку в множество
                    save_progress(tested_params)  # Сохраняем прогресс
                    elapsed_time = time.time() - start_time
                    if elapsed_time >= 60:  # Логирование каждую минуту
                        log_results(best_size, best_params, elapsed_time)
                        start_time = time.time()

    # Тестирование параметров квантизации цвета
    for n_colors in n_colors_list:
        # Создаем уникальный ключ как строковое представление параметров
        key = f"color_quantization_{n_colors}"
        if key in tested_params:
            continue
        result = test_color_quantization_params(image, n_colors)
        if result is not None:
            file_size, params, compressed_data, restored_image = result
            if file_size < best_size and calculate_psnr(image, restored_image) > 30:
                best_size = file_size
                best_params = params
                best_compressed_data = compressed_data
                best_restored_image = restored_image
        tested_params.add(key)  # Добавляем строку в множество
        save_progress(tested_params)  # Сохраняем прогресс
        elapsed_time = time.time() - start_time
        if elapsed_time >= 60:  # Логирование каждую минуту
            log_results(best_size, best_params, elapsed_time)
            start_time = time.time()

    # Финальное логирование
    log_results(best_size, best_params, time.time() - start_time)

    return best_size, best_params, best_compressed_data, best_restored_image


# === GUI ===

class ImageOptimizerApp(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        self.setWindowTitle("Image Optimizer")
        self.setGeometry(100, 100, 800, 600)
        self.setStyleSheet("background-color: #333; color: white;")
        self.label = QLabel("Выберите изображение для оптимизации", self)
        self.label.setAlignment(Qt.AlignCenter)
        self.label.setStyleSheet("font-size: 16px; padding: 10px;")
        self.button_select = QPushButton("Выбрать изображение", self)
        self.button_select.setStyleSheet("background-color: #555; color: white; font-size: 14px;")
        self.button_select.clicked.connect(self.select_image)
        self.button_optimize = QPushButton("Оптимизировать", self)
        self.button_optimize.setStyleSheet("background-color: #777; color: white; font-size: 14px;")
        self.button_optimize.clicked.connect(self.optimize_image)
        self.button_optimize.setEnabled(False)
        self.result_text = QTextEdit(self)
        self.result_text.setReadOnly(True)
        self.result_text.setStyleSheet("background-color: #444; color: white; font-size: 14px;")
        self.layout = QVBoxLayout()
        self.layout.addWidget(self.label)
        self.layout.addWidget(self.button_select)
        self.layout.addWidget(self.button_optimize)
        self.layout.addWidget(self.result_text)
        self.setLayout(self.layout)
        self.image_path = None

    def select_image(self):
        file_path, _ = QFileDialog.getOpenFileName(self, "Выберите изображение", "",
                                                   "Images (*.png *.jpg *.jpeg *.bmp)")
        if file_path:
            if not os.path.exists(file_path):  # Проверка существования файла
                self.result_text.setText(f"Файл {file_path} не найден.")
                return
            self.image_path = file_path
            pixmap = QPixmap(file_path)
            self.label.setPixmap(pixmap.scaled(300, 300, Qt.KeepAspectRatio))
            self.button_optimize.setEnabled(True)

    def optimize_image(self):
        if not self.image_path:
            return
        try:
            if not os.path.exists(self.image_path):  # Проверка существования файла
                self.result_text.setText(f"Файл {self.image_path} не найден.")
                return
            image = cv2.imread(self.image_path)
            if image is None:
                raise ValueError("Не удалось загрузить изображение.")
            image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

            # Последовательная оптимизация
            size, params, _, restored_image = find_best_parameters_sequential(image)
            if restored_image is None:
                self.result_text.setText("Не удалось найти подходящие параметры.")
                return
            psnr = calculate_psnr(image, restored_image)
            self.result_text.setText(f"Лучший размер: {size} байт\n"
                                     f"Параметры: {params}\n"
                                     f"PSNR: {psnr:.2f} dB")
        except Exception as e:
            self.result_text.setText(f"Ошибка: {str(e)}")


# Запуск приложения

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = ImageOptimizerApp()
    window.show()
    sys.exit(app.exec_())
