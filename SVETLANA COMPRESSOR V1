import sys
import numpy as np
import pywt
import lzma
import cv2
import pickle
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QLabel, QFileDialog, QVBoxLayout
from PyQt5.QtGui import QPixmap, QImage
from PyQt5.QtCore import Qt
import os

# === Оптимизированный алгоритм сжатия ===
def custom_compression(image, wavelet_type='haar', level=1):
    """Сжатие изображения с учетом размера."""
    height, width = image.shape[:2]
    min_size = 32
    if height <= min_size or width <= min_size:
        compressed_data = lzma.compress(image.tobytes(), preset=9)
        return compressed_data, None, image.shape, {'wavelet_used': False}
    if height < min_size or width < min_size:
        original_shape = image.shape
        image = cv2.resize(image, (min_size, min_size))
    else:
        original_shape = image.shape
    coeffs_r = pywt.wavedec2(image[:, :, 0], wavelet_type, level=level)
    coeffs_g = pywt.wavedec2(image[:, :, 1], wavelet_type, level=level)
    coeffs_b = pywt.wavedec2(image[:, :, 2], wavelet_type, level=level)
    coeffs_r_array, _ = pywt.coeffs_to_array(coeffs_r)
    coeffs_g_array, _ = pywt.coeffs_to_array(coeffs_g)
    coeffs_b_array, _ = pywt.coeffs_to_array(coeffs_b)
    quantization_factor = max(5, int(min(height, width) / 10))
    coeffs_r_quantized = np.round(coeffs_r_array / quantization_factor) * quantization_factor
    coeffs_g_quantized = np.round(coeffs_g_array / quantization_factor) * quantization_factor
    coeffs_b_quantized = np.round(coeffs_b_array / quantization_factor) * quantization_factor
    compressed_data = lzma.compress(np.hstack((coeffs_r_quantized.flatten(),
                                               coeffs_g_quantized.flatten(),
                                               coeffs_b_quantized.flatten())).astype(np.float32), preset=9)
    return compressed_data, (_, _, _), original_shape, {
        'wavelet_used': True,
        'wavelet_type': wavelet_type,
        'level': level,
        'quantization_factor': quantization_factor,
        'original_shape': original_shape
    }

# === Декомпрессия ===
def custom_decompression(compressed_data, coeffs_slices, original_shape, params):
    try:
        if not params['wavelet_used']:
            image_bytes = lzma.decompress(compressed_data)
            restored_image = np.frombuffer(image_bytes, dtype=np.uint8).reshape(original_shape)
            return restored_image
        decompressed_data = np.frombuffer(lzma.decompress(compressed_data), dtype=np.float32)
        split_size = original_shape[0] * original_shape[1]
        coeffs_r = (decompressed_data[:split_size].reshape(original_shape[:2]), coeffs_slices[0])
        coeffs_g = (decompressed_data[split_size:2 * split_size].reshape(original_shape[:2]), coeffs_slices[1])
        coeffs_b = (decompressed_data[2 * split_size:].reshape(original_shape[:2]), coeffs_slices[2])
        r = pywt.waverec2(pywt.array_to_coeffs(*coeffs_r, output_format='wavedec2'), params['wavelet_type'])
        g = pywt.waverec2(pywt.array_to_coeffs(*coeffs_g, output_format='wavedec2'), params['wavelet_type'])
        b = pywt.waverec2(pywt.array_to_coeffs(*coeffs_b, output_format='wavedec2'), params['wavelet_type'])
        restored = np.stack([r, g, b], axis=-1)
        if tuple(original_shape) != restored.shape:
            restored = cv2.resize(restored, (params['original_shape'][1], params['original_shape'][0]))
        return np.clip(restored, 0, 255).astype(np.uint8)
    except Exception as e:
        print(f"Ошибка при декомпрессии: {e}")
        return None

# === GUI ===
class ImageCompressorApp(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        self.setWindowTitle("Svetlana Image Compressor")
        self.setGeometry(100, 100, 600, 400)
        self.setStyleSheet("background-color: #333; color: white;")
        self.label = QLabel("Выберите изображение для сжатия", self)
        self.label.setAlignment(Qt.AlignCenter)
        self.label.setStyleSheet("font-size: 16px; padding: 10px;")
        self.button_select = QPushButton("Выбрать изображение", self)
        self.button_select.setStyleSheet("background-color: #555; color: white; font-size: 14px;")
        self.button_select.clicked.connect(self.select_image)
        self.button_compress = QPushButton("Сжать и сохранить", self)
        self.button_compress.setStyleSheet("background-color: #777; color: white; font-size: 14px;")
        self.button_compress.clicked.connect(self.compress_image)
        self.button_compress.setEnabled(False)
        self.layout = QVBoxLayout()
        self.layout.addWidget(self.label)
        self.layout.addWidget(self.button_select)
        self.layout.addWidget(self.button_compress)
        self.setLayout(self.layout)
        self.image_path = None

    def select_image(self):
        file_path, _ = QFileDialog.getOpenFileName(self, "Выберите изображение", "", "Images (*.png *.jpg *.jpeg *.bmp)")
        if file_path:
            self.image_path = file_path
            pixmap = QPixmap(file_path)
            self.label.setPixmap(pixmap.scaled(300, 300, Qt.KeepAspectRatio))
            self.button_compress.setEnabled(True)

    def compress_image(self):
        if not self.image_path:
            return
        try:
            image = cv2.imread(self.image_path)
            if image is None:
                raise ValueError("Не удалось загрузить изображение.")
            image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            compressed_data, coeffs_slices, shape, params = custom_compression(image, wavelet_type='haar', level=1)
            save_path, _ = QFileDialog.getSaveFileName(self, "Сохранить сжатый файл", "", "Svetlana Format (*.svetlana)")
            if save_path:
                with open(save_path, 'wb') as f:
                    pickle.dump((compressed_data, coeffs_slices, shape, params), f)
                self.label.setText("Файл успешно сжат и сохранён!")
        except Exception as e:
            self.label.setText(f"Ошибка: {str(e)}")

# Запуск приложения
if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = ImageCompressorApp()
    window.show()
    sys.exit(app.exec_())
